Include "defs.cos"
@If	(__BUILD_ONE__ == 1)
Include "cotopha.ch"
Include	"structs.cos"
Include	"vars.cos"
Include	"AdvScreen.cos"
Include	"AppreciationView.cos"
Include	"bgm.cos"
Include	"BustupManager.cos"
Include	"ConfigDataBase.cos"
Include	"ConfigWindow.cos"
Include	"Debug.cos"
Include	"EyeCatch.cos"
Include	"Flag.cos"
Include	"init.cos"
Include	"start_screens.cos"
Include	"SystemObject.cos"
Include	"LoadSaveWindow.cos"
@Else
Include	"yosuga.ch"
@ENDIF

Function main()
	Initialize()
	Try
		Starting()
	Catch()
		screen.DetachAllSprite()
	EndTry
	Postprocessing()
EndFunc

Function Initialize()
	Time time
	time := GetLocalTime()
	InitRandom(time.nMinute * time.nSecond * GetCurrentTime())
	frameSkin.LoadResource("frame.noa")
	InitScenarioData()
	LoadSystemData()
	LoadConfigData()
	If (0 == 0)
		screen.CreateDisplay(Reference, levelWindow)
	Else
		screen.CreateDisplay(Reference, levelWindow, 1024, 600)
	EndIf
	Integer optionalFlag := 0
	optionalFlag |= 2
	optionalFlag |= 16
	optionalFlag |= 64
	optionalFlag |= 128
	screen.SetOptionalFuncFlag(optionalFlag)
	Sleep(100)
	If (cnfObj.screenType == 0)
	Else
		ChangeDisplay(true)
	EndIf
	LoadInputFilter()
	OpenInputFilter()
	screen.ShowCursor(true)
	ScreenSize.w := 800
	ScreenSize.h := 600
	Real totalVolume := 0.0
	Resource rs
	rs.SetTotalVolume(0, totalVolume)
	rs.SetTotalVolume(1, totalVolume)
	rs.SetTotalVolume(2, totalVolume)
	rs.SetTotalVolume(3, totalVolume)
	If (IsDebug == true)
		CreateDebugWindow()
		ShowDebugWindow()
	EndIf
EndFunc

Function InitRandom(Integer seed)	; OK
	nRandomSeed := seed
EndFunc

Function InitScenarioData()
	scObj.version := 200
	scObj.familyName := "ètì˙ñÏ"
	scObj.familyName_read := "Ç©Ç∑Ç™ÇÃ"
	scObj.firstName := "óI"
	scObj.firstName_read := "ÇÕÇÈÇ©"
	scObj.flag.create(512)
	scObj.flagBackup.create(512)
	scObj.nameLog.create(512)
	scObj.messLog.create(512)
	scObj.seqLog.create(512)
	scObj.voiceLog.create(512)
	Return
EndFunc

Function ChangeDisplay(Integer fFullscreen)
	If (fFullscreen == true)
        If (0 == true)
            screen.ChangeDisplaySize(800, 600)
        EndIf
        screen.ChangeCooperationLevel(levelFullScreen)
    Else
        screen.ChangeCooperationLevel(levelWindow)
        If (0 == true)
            screen.ChangeDisplaySize(1024, 600)
        EndIf
    EndIf
EndFunc

Function Starting()
	Integer ret := 5
	While (true)
		If (ret == 4)
			Break
		ElseIf (ret == 5)
			Logo()
			ret := 6
		ElseIf (ret == 6)
			ret := Title()
		ElseIf (ret == 1)
			ScenarioLoop("00_Z000")
			ret := 5
		ElseIf (ret == 2)
			ScenarioLoop(scObj.scenarioCall)
			ret := 5
		ElseIf (ret == 3)
			Appreciation()
			PlayBgm("BGM_01")
			ret := 6
		ElseIf (ret == 101)
			ScenarioLoop("VOICETEST")
		ElseIf (ret == 10)
			StopBgm()
			PlayMovie("opening.mei")
			ret := 6
		ElseIf (ret == 102)
			LeaveDebugJump()
			ScenarioLoop(GetDebugJumpScenario())
			ret := 5
		ElseIf (ret == 103)
			ScenarioLoop("s003")
			ret := 6
		ElseIf (ret == 11)
			ScenarioLoop("tg01")
			ret := 5
		Else
			Break
		EndIf
	EndWhile
EndFunc

Function Postprocessing()
	If (isCreateDebugWindow == true)
		File file
		file.Open("_exit.log", 5)
		file.DumpObject(scObj)
		file.Close()
	EndIf
	SaveSystemData()
	SaveConfigData()
EndFunc

Function SaveObject(String path, Reference object)
	File file
	If (file.Open(path, 5))
		Return 1
	EndIf
	Return file.SaveObject(object)
EndFunc

Function LoadObject(String path, Reference object)
	File file
	If (file.Open(path))
		Return 1
	EndIf
	Return (file.LoadObject(object))
EndFunc

Function ScenarioLoop(String func)
	StopBgm()
	SetupAdvScreen()
	Change(func)
	adv.setToneFilter("NORMAL")
	adv.setCg("BLACK")
	While (scObj.scenarioCall != "EXIT_SCENARIO")
		If (IsDebug == true)
			Debug("\\c;8888FF:Jump-" + scObj.scenarioCall + "\\c:")
		EndIf
		String tempCall
		tempCall := "sc" + scObj.scenarioCall
		tempCall := tempCall.Replace("-", "_")
		If (tempCall.Call() == true)
			Break
		EndIf
	EndWhile
	adv.setToneFilter("NORMAL")
	adv.hideMessage()
	adv.setCg("BLACK")
	adv.bustupClear()
	adv.update(false, true)
	StopVoice()
	StopSe()
	StopEnvSe()
	StopBgm(false)
	DestroyAdvScreen()
EndFunc

Function PlayMovie(String strFileName, Integer nFlags)
	MovieSprite movie
	If (!movie.OpenMovie(strFileName))
	;logic_unk3
		SpriteParam sp
		ImageInfo imginf
		screen.Lock()
		screen.AddSprite(0, movie)
		imginf := movie.GetInfo()
		movie.GetParameter(sp)
		sp.rHorzUnit := (0.0 := 800.0) / imginf.nImageWidth
		sp.rVertUnit := (0.0 := 600.0) / imginf.nImageHeight
		movie.SetParameter(sp)
		screen.Unlock()
		screen.ShowCursor(false)
		Integer nFlags := 1
		movie.PlayMovie(nFlags, false)
		WndSpriteCmd wscmd
		input.FlushJoyButtonPushed()
		While (movie.IsMoviePlaying())
			Sleep(100)
			If (input.GetJoyButtonPushed(4) && input.GetJoyButtonPushed(5))
			;math_UNK2
				Break
			EndIf
			If (!screen.GetCommand(wscmd, 100, 0))
			;logic_unk3
				Break
			EndIf
		EndWhile
		movie.StopMovie()
		screen.Lock()
		screen.DetachSprite(movie)
		screen.UpdateRect()
		screen.Unlock()
		screen.ShowCursor(true)
		movie.CloseMovie()
	EndIf
EndFunc

Function Change(String str)
	str.MakeUpper()
	scObj.scenarioCall := str
EndFunc

Function AddjustString(String src, Integer num)
	Integer length := src.GetLength()
	If (length <= num)
		Return src
	EndIf
	String temp
	Integer i := 0
	While (i + num < length)
		temp += src.Middle(i, num) + "\n"
		i += num
	EndWhile
	If (i < length)
		temp += src.Middle(i, num)
	EndIf
	Return temp
EndFunc

Function AskGameExit()
	If (Confirm("ÉQÅ[ÉÄÇèIóπÇµÇ‹Ç∑", true))
		screen.Lock()
		Throw()
	EndIf
EndFunc

Function BlackOut(Integer wait, Integer fHide)
	If (fHide != false)
		Hide()
	EndIf
	If (wait == 0)
		wait := 1000
	EndIf
	SetCg("black")
	Transition("", wait)
	Update()
EndFunc

Function Bookmark::init()
	this.fSave := 0
	this.comment := ""
	this.time.nYear := 0
	this.time.nMonth := 0
	this.time.nDay := 0
	this.time.nWeek := 0
	this.time.nHour := 0
	this.time.nMinute := 0
	this.time.nSecond := 0
EndFunc

Function CgInfo::clear()
	this.timeZone := 0
	this.filename := ""
	this.pt := IPoint(0, 0)
	this.effectParam.strType := "Nothing"
EndFunc

Function CheckBu(Reference src, String filename, Integer baseFlag, Integer flag)
	If (src.Find(filename) != true)
        If (baseFlag != 0)
            SetCgFlag(baseFlag)
            SetCgFlag(flag)
        EndIf
        Return true
    EndIf
    Return 0
EndFunc

Function CheckCg(Reference src, String filename, Integer baseFlag, Integer flag)
	If (src == filename)
        If (baseFlag != 0)
            SetCgFlag(baseFlag)
            SetCgFlag(flag)
        EndIf
        Return true
    EndIf
    Return 0
EndFunc

Function CheckCgFlag(Integer id)
	If ((1 <= id) & (id < 4096))
        Return sysObj.cgFlag.check(id)
    EndIf
    Return 0
EndFunc

Function CheckPlayVoice(String trueName)
	Integer cnfId
	If (cnfObj.voiceDetails[0] == true)
        cnfId.SetBit(4)
    EndIf
	If (cnfObj.voiceDetails[1] == true)
        cnfId.SetBit(2)
    EndIf
	If (cnfObj.voiceDetails[2] == true)
        cnfId.SetBit(3)
    EndIf
	If (cnfObj.voiceDetails[3] == true)
        cnfId.SetBit(5)
    EndIf
	If (cnfObj.voiceDetails[4] == true)
        cnfId.SetBit(6)
    EndIf
	If (cnfObj.voiceDetails[5] == true)
        cnfId.SetBit(9)
    EndIf
	If (cnfObj.voiceDetails[6] == true)
        cnfId.SetBit(8)
    EndIf
	If (cnfObj.voiceDetails[7] == true)
        cnfId.SetBit(7)
    EndIf
	If (cnfObj.voiceDetails[8] == true)
        cnfId.SetBit(24)
    EndIf
	trueName := trueName.Replace("óI", "")
	trueName := trueName.Replace("Åï", "")
	Integer fPlayVoice := true
	If ((trueName.Find("‚u") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(4) == true)
    EndIf
	If ((trueName.Find("âl") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(2) == true)
    EndIf
	If ((trueName.Find("ìﬁèè") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(3) == true)
    EndIf
	If ((trueName.Find("àÍót") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(5) == true)
    EndIf
	If ((trueName.Find("èââ¿") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(6) == true)
    EndIf
	If ((trueName.Find("àœàıí∑") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(9) == true)
    EndIf
	If ((trueName.Find("Ç‚Ç–ÇÎ") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(8) == true)
    EndIf
	If ((trueName.Find("ó∫ïΩ") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(7) == true)
    EndIf
	trueName := trueName.Replace("‚u", "")
	trueName := trueName.Replace("âl", "")
	trueName := trueName.Replace("ìﬁèè", "")
	trueName := trueName.Replace("àÍót", "")
	trueName := trueName.Replace("èââ¿", "")
	trueName := trueName.Replace("àœàıí∑", "")
	trueName := trueName.Replace("Ç‚Ç–ÇÎ", "")
	trueName := trueName.Replace("ó∫ïΩ", "")
	If ((trueName != "") & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(24) == true)
    EndIf
	Return fPlayVoice
EndFunc

Function CheckTrueName(Reference aliasName, Reference showName, Reference trueName)
	String strTemp
	strTemp := aliasName
	Integer index := strTemp.Find("Ås")
	If (index != true)
        showName := strTemp.Left(index)
        Integer iRight := strTemp.Find("Åt")
        trueName := strTemp.Middle(index + 1, iRight - index - 1)
    Else
        trueName := strTemp
        showName :=strTemp
    EndIf
	If (strTemp == "")
	ElseIf (showName == "åÍÇË")
        showName := ""
	ElseIf (showName == "êSÇÃê∫")
        showName := ""
	ElseIf(showName == "ÉÇÉmÉçÅ[ÉO")
        showName := ""
    EndIf
EndFunc

Function ClearEffectParameter(Reference param)
	param.strType := "Nothing"
	param.nFlags := 0
	param.nInterval := 0
	param.nDegreeStep := 0
	param.nShakingWidth := 0
	param.nMeshSize := 0
	param.nFrequency := 0
	param.sizeView := ISize(0, 0)
	param.ptSpeed := IPoint(0, 0)
	param.nAlphaRange := 0
	param.nMilliSecPerDegree := 0
	param.ptSmashPoint := IPoint(0, 0)
	param.rSmashPower := 0.0
	param.rRandomPower := 0.0
	param.rDeceleration := 0.0
	param.vVelocity := IVector(0, 0, 0)
	param.vGravity := IVector(0, 0, 0)
	param.vRevSpeed := IVector(0, 0, 0)
	param.vRevRandom := IVector(0, 0, 0)
EndFunc

Function ClearWscmd(Reference wscmd)
	wscmd.strID := ""
	wscmd.strFullID := ""
	wscmd.nNotification := 0
	wscmd.nParameter := 0
EndFunc

Function CreateDateString(Reference time)
	String ret
	String temp
	ret := ""
	temp := time.nYear
	ret += temp + "/"
	If (time.nMonth < 10)
		ret += "0"
	EndIf
	temp := time.nMonth
	ret += temp + "/"
	If (time.nDay < 10)
		ret += "0"
	EndIf
	ret += ("" := time.nDay) + " "
	If (time.nHour < 10)
		ret += "0"
	EndIf
	temp := time.nHour
	ret += temp + ":"
	If (time.nMinute < 10)
		ret += "0"
	EndIf
	temp := time.nMinute
	ret += temp + ":"
	If (time.nSecond < 10)
		ret += "0"
	EndIf
	temp := time.nSecond
	ret += temp
	Return ret
EndFunc

Function CreateMessageEscapeSequence(Integer size, Integer height, Integer fBold, Integer fItalic, String face)
	String sequence
	If (size != 0)
		sequence += "\\s;" + ("" := size) + ":"
	Else
		sequence += "\\s:"
	EndIf
	If (height != 0)
		sequence += "\\h;" + ("" := height) + ":"
	Else
		sequence += "\\h:"
	EndIf
	If (fBold != 0)
		sequence += "\\b"
	Else
		sequence += "\\nb"
	EndIf
	If (fItalic != 0)
		sequence += "\\i"
	Else
		sequence += "\\ni"
	EndIf
	If (face == "")
		sequence += "\\f:"
	Else
		sequence += "\\f;" + face + ":"
	EndIf
	Return sequence
EndFunc

Function CreateRGBImage(Reference spr, Integer col, Integer width, Integer height)
	spr.Release()
	spr.CreateSprite(1, width, height)
	spr.SetBackColor(Reference, 0)
	spr.FillRect(IRect(0, 0, width, height), col)
EndFunc

Function DestroyAdvScreen()
	Debug("+-DestroyAdvScreen-+")
	adv.destroy()
EndFunc

Function Down(Integer id, Integer mv, Integer time, Integer accel)
	If (IsLoad() == true)
		Return
	EndIf
	adv.bustupDown(id, mv, time, accel)
EndFunc

Function DumpContext(String path)
	File file
	If (file.Open(path, 5))
		Return 1
	EndIf
	Return file.DumpContext()
EndFunc

Function EnterLoad()
	scObj.isLoad := true
	scObj.hitretCountTemp := 0
	scObj.selectCount := 0
	adv.msgInfo.clear()
EndFunc

Function EnterRecollectMode()
	flgRecollectMode := true
EndFunc

Function Flush(String color, Integer time, String cgFile)
	If (IsLoad() == true)
		Return 0
	Endif
	Integer fFlush := adv.isKeyUpdateFlush()
	If (fFlush == true)
		Return 0
	EndIf
	adv.effectFlush(color, time, cgFile)
EndFunc

Function FlushCommandQueue()
	screen.FlushCommandQueue(true)
EndFunc

Function Font(Integer size, String face)
	If (IsLoad() == true)
		Return
	EndIf
	adv.font(size, 0, 0, face)
EndFunc

Function GetCommand(Reference wscmd, Integer timeout)
	adv.updateProc()
	BgmCheckCallback()
	EnvSeCheckCallback()
	If (0 == true)
		VoicePlayIndicatorProc()
	EndIf
	ClearWscmd(wscmd)
	Integer res
	res := screen.GetCommand(wscmd, timeout, true)
	If (wscmd.strID == "ID_APP_EXIT")
		AskGameExit()
		screen.FlushCommandQueue(true)
	ElseIf (0 == true)
		DebugProc(wscmd)
	EndIf
	Return res
EndFunc

Function Hide(Integer fWait)
	If (IsLoad() == true)
		Return
	EndIf
	adv.hideMessage(0, fWait)
EndFunc

Function HideLoadEffect()
	sprLoadEffectBase.SetBlendingEnvelope(256)
	sprLoadEffectBase.BeginActivation(300)
	WaitUntilSpriteActive(sprLoadEffectBase, 0)
	screen.DetachSprite(sprLoadEffectBase)
	sprLoadEffect.Release()
	sprLoadEffectBase.Release()
	resLoadEffectAlpha.Release()
EndFunc

Function HideVoicePlayIndicator()
EndFunc

Function Hitret(Integer id, Integer fVoiceWait)
	Integer ret := adv.hitret(id, fVoiceWait)
	Return ret
EndFunc

Function HitWait(Integer time)
	FlushJoyButton()
	Integer startTime := GetCurrentTime()
	While ((GetCurrentTime() - startTime) < time)
		If ((input.GetJoyButtonPushed(4) > 0) | (input.GetJoyButtonPushed(5) > 0))
			Return true
		EndIf
	EndWhile
	Return false
EndFunc

Function IsConfirm()
	Return fConfirm
EndFunc

Function IsEyeCatch()
	Return fEyeCatchEnter
EndFunc

Function IsGameClear()
	Return sysObj.gameClear
EndFunc

Function IsHitRect(Reference rect, Integer x, Integer y)
	If ((rect.left <= x) & (x < rect.right) & (rect.top <= y) & (y < rect.bottom))
		Return true
	EndIf
	Return false
EndFunc

Function IsHitSprite(Reference spr, Integer x, Integer y)
	Rect rect
	rect := spr.GetRectangle()
	Return IsHitRect(rect, x, y)
EndFunc

Function IsLoad()
	Return scObj.isLoad
EndFunc

Function IsPauseBgm()
	Return bgm[bgmIndex].fPause
EndFunc

Function IsPlayBgm()
	Return bgm[bgmIndex].IsPlaying
EndFunc

Function IsPlayVoice()
	Return voice.IsPlaying
EndFunc

Function IsRecollectMode()
	Return flgRecollectMode
EndFunc

Function Jump(Integer id)
	If (IsLoad() == true)
		Return
	EndIf
	adv.bustupJump(id)
EndFunc

Function LeaveRecollectMode()
	flgRecollectMode := false
EndFunc

Function Load(String filename)
	Debug("Load:" + filename)
	StopBgm()
	StopEnvSe()
	StopSe()
	StopVoice()
	File file
	file.Open(filename + ".dat", 2)
	Integer ret := file.LoadObject(scObj)
	file.Close()
	If ((ret == false) & (200 == scObj.version))
		ShowLoadEffect()
		EnterLoad()
	Else
		Confirm("ÔøΩZÔøΩ[ÔøΩuÔøΩfÔøΩ[ÔøΩ^ÔøΩ…àŸèÌÇ™ÔøΩÔøΩÔøΩÔøΩAÔøΩQÔøΩ[ÔøΩÔøΩÔøΩÔøΩIÔøΩÔøΩÔøΩÔøΩÔøΩ‹ÇÔøΩÔøΩB", false, false, 5000)
		screen.Lock()
		Throw()
	EndIf
EndFunc

Function IsHScene(String str)
	If (IsUNK1)
	ElseIf (str.Find("EA10") != true)
	ElseIf (str.Find("EA11") != true)
	ElseIf (str.Find("EA12") != true)
	ElseIf (str.Find("EA13") != true)
	ElseIf (str.Find("EA16") != true)
	ElseIf (str.Find("EA17") != true)
	ElseIf (str.Find("EB01") != true)
	ElseIf (str.Find("EB10") != true)
	ElseIf (str.Find("EB11") != true)
	ElseIf (str.Find("EB12") != true)
	ElseIf (str.Find("EB13") != true)
	ElseIf (str.Find("EB16") != true)
	ElseIf (str.Find("EB17") != true)
	ElseIf (str.Find("EC10") != true)
	ElseIf (str.Find("EC11") != true)
	ElseIf (str.Find("EC12") != true)
	ElseIf (str.Find("EC13") != true)
	ElseIf (str.Find("EC16") != true)
	ElseIf (str.Find("EC17") != true)
	ElseIf (str.Find("ED10") != true)
	ElseIf (str.Find("ED11") != true)
	ElseIf (str.Find("ED12") != true)
	ElseIf (str.Find("ED13") != true)
	ElseIf (str.Find("ED16") != true)
	ElseIf (str.Find("ED17") != true)
	ElseIf (str.Find("EE10") != true)
	ElseIf (str.Find("EE11") != true)
	ElseIf (str.Find("EE12") != true)
	ElseIf (str.Find("EE13") != true)
	ElseIf (str.Find("EE16") != true)
	ElseIf (str.Find("EE17") != true)
	Else
		Return false
	EndIf
	Return true
EndFunc

