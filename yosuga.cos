Include "defs.cos"
@If	(__BUILD_ONE__ == 1)
Include "cotopha.ch"
Include	"structs.cos"
Include	"vars.cos"
Include	"AdvScreen.cos"
Include	"AppreciationView.cos"
Include	"bgm.cos"
Include	"BustupManager.cos"
Include	"ConfigDataBase.cos"
Include	"ConfigWindow.cos"
Include	"Debug.cos"
Include	"EyeCatch.cos"
Include	"Flag.cos"
Include	"HistoryWindow.cos"
Include	"init.cos"
Include	"Input.cos"
Include	"LogManager.cos"
Include	"MessageFrame.cos"
Include	"start_screens.cos"
Include	"SystemObject.cos"
Include	"LoadSaveWindow.cos"
Include	"utils.cos"
@Else
Include	"yosuga.ch"
@ENDIF

Function main()
	Initialize()
	;Try
		Starting()
	;Catch()
	;	screen.DetachAllSprite()
	;EndTry
	Postprocessing()
EndFunc

Function Initialize()
	Time time
	time := GetLocalTime()
	InitRandom(time.nMinute * time.nSecond * GetCurrentTime())
	frameSkin.LoadResource("frame.noa")
	InitScenarioData()
	LoadSystemData()
	LoadConfigData()
	If (0 == 0)
		screen.CreateDisplay(Reference, levelWindow)
	Else
		screen.CreateDisplay(Reference, levelWindow, 1024, 600)
	EndIf
	Integer optionalFlag := 0
	optionalFlag |= 2
	optionalFlag |= 16
	optionalFlag |= 64
	optionalFlag |= 128
	screen.SetOptionalFuncFlag(optionalFlag)
	Sleep(100)
	If (cnfObj.screenType == 0)
	Else
		ChangeDisplay(true)
	EndIf
	LoadInputFilter()
	OpenInputFilter()
	screen.ShowCursor(true)
	ScreenSize.w := 800
	ScreenSize.h := 600
	Real totalVolume := 0.0
	Resource rs
	rs.SetTotalVolume(0, totalVolume)
	rs.SetTotalVolume(1, totalVolume)
	rs.SetTotalVolume(2, totalVolume)
	rs.SetTotalVolume(3, totalVolume)
	If (IsDebug == true)
		CreateDebugWindow()
		ShowDebugWindow()
	EndIf
EndFunc

Function ChangeDisplay(Integer fFullscreen)
	If (fFullscreen == true)
        If (0 == true)
            screen.ChangeDisplaySize(800, 600)
        EndIf
        screen.ChangeCooperationLevel(levelFullScreen)
    Else
        screen.ChangeCooperationLevel(levelWindow)
        If (0 == true)
            screen.ChangeDisplaySize(1024, 600)
        EndIf
    EndIf
EndFunc

Function Starting()
	Integer ret := 5
	While (true)
		If (ret == 4)
			Break
		ElseIf (ret == 5)
			Logo()
			ret := 6
		ElseIf (ret == 6)
			ret := Title()
		ElseIf (ret == 1)
			ScenarioLoop("00_Z000")
			ret := 5
		ElseIf (ret == 2)
			ScenarioLoop(scObj.scenarioCall)
			ret := 5
		ElseIf (ret == 3)
			Appreciation()
			PlayBgm("BGM_01")
			ret := 6
		ElseIf (ret == 101)
			ScenarioLoop("VOICETEST")
		ElseIf (ret == 10)
			StopBgm()
			PlayMovie("opening.mei")
			ret := 6
		ElseIf (ret == 102)
			LeaveDebugJump()
			ScenarioLoop(GetDebugJumpScenario())
			ret := 5
		ElseIf (ret == 103)
			ScenarioLoop("s003")
			ret := 6
		ElseIf (ret == 11)
			ScenarioLoop("tg01")
			ret := 5
		Else
			Break
		EndIf
	EndWhile
EndFunc

Function Postprocessing()
	If (isCreateDebugWindow == true)
		File file
		file.Open("_exit.log", 5)
		file.DumpObject(scObj)
		file.Close()
	EndIf
	SaveSystemData()
	SaveConfigData()
EndFunc

Function PlayMovie(String strFileName, Integer nFlags)
	MovieSprite movie
	If (!movie.OpenMovie(strFileName))
	;logic_unk3
		SpriteParam sp
		ImageInfo imginf
		screen.Lock()
		screen.AddSprite(0, movie)
		imginf := movie.GetInfo()
		movie.GetParameter(sp)
		sp.rHorzUnit := (0.0 := 800.0) / imginf.nImageWidth
		sp.rVertUnit := (0.0 := 600.0) / imginf.nImageHeight
		movie.SetParameter(sp)
		screen.Unlock()
		screen.ShowCursor(false)
		Integer nFlags := 1
		movie.PlayMovie(nFlags, false)
		WndSpriteCmd wscmd
		input.FlushJoyButtonPushed()
		While (movie.IsMoviePlaying())
			Sleep(100)
			If (input.GetJoyButtonPushed(4) && input.GetJoyButtonPushed(5))
			;math_UNK2
				Break
			EndIf
			If (!screen.GetCommand(wscmd, 100, 0))
			;logic_unk3
				Break
			EndIf
		EndWhile
		movie.StopMovie()
		screen.Lock()
		screen.DetachSprite(movie)
		screen.UpdateRect()
		screen.Unlock()
		screen.ShowCursor(true)
		movie.CloseMovie()
	EndIf
EndFunc

Function CheckPlayVoice(String trueName)
	Integer cnfId
	If (cnfObj.voiceDetails[0] == true)
        cnfId.SetBit(4)
    EndIf
	If (cnfObj.voiceDetails[1] == true)
        cnfId.SetBit(2)
    EndIf
	If (cnfObj.voiceDetails[2] == true)
        cnfId.SetBit(3)
    EndIf
	If (cnfObj.voiceDetails[3] == true)
        cnfId.SetBit(5)
    EndIf
	If (cnfObj.voiceDetails[4] == true)
        cnfId.SetBit(6)
    EndIf
	If (cnfObj.voiceDetails[5] == true)
        cnfId.SetBit(9)
    EndIf
	If (cnfObj.voiceDetails[6] == true)
        cnfId.SetBit(8)
    EndIf
	If (cnfObj.voiceDetails[7] == true)
        cnfId.SetBit(7)
    EndIf
	If (cnfObj.voiceDetails[8] == true)
        cnfId.SetBit(24)
    EndIf
	trueName := trueName.Replace("óI", "")
	trueName := trueName.Replace("Åï", "")
	Integer fPlayVoice := true
	If ((trueName.Find("‚u") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(4) == true)
    EndIf
	If ((trueName.Find("âl") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(2) == true)
    EndIf
	If ((trueName.Find("ìﬁèè") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(3) == true)
    EndIf
	If ((trueName.Find("àÍót") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(5) == true)
    EndIf
	If ((trueName.Find("èââ¿") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(6) == true)
    EndIf
	If ((trueName.Find("àœàıí∑") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(9) == true)
    EndIf
	If ((trueName.Find("Ç‚Ç–ÇÎ") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(8) == true)
    EndIf
	If ((trueName.Find("ó∫ïΩ") != true) & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(7) == true)
    EndIf
	trueName := trueName.Replace("‚u", "")
	trueName := trueName.Replace("âl", "")
	trueName := trueName.Replace("ìﬁèè", "")
	trueName := trueName.Replace("àÍót", "")
	trueName := trueName.Replace("èââ¿", "")
	trueName := trueName.Replace("àœàıí∑", "")
	trueName := trueName.Replace("Ç‚Ç–ÇÎ", "")
	trueName := trueName.Replace("ó∫ïΩ", "")
	If ((trueName != "") & (fPlayVoice == true))
        fPlayVoice := (cnfId.TestBit(24) == true)
    EndIf
	Return fPlayVoice
EndFunc

Function ClearEffectParameter(Reference param)
	param.strType := "Nothing"
	param.nFlags := 0
	param.nInterval := 0
	param.nDegreeStep := 0
	param.nShakingWidth := 0
	param.nMeshSize := 0
	param.nFrequency := 0
	param.sizeView := ISize(0, 0)
	param.ptSpeed := IPoint(0, 0)
	param.nAlphaRange := 0
	param.nMilliSecPerDegree := 0
	param.ptSmashPoint := IPoint(0, 0)
	param.rSmashPower := 0.0
	param.rRandomPower := 0.0
	param.rDeceleration := 0.0
	param.vVelocity := IVector(0, 0, 0)
	param.vGravity := IVector(0, 0, 0)
	param.vRevSpeed := IVector(0, 0, 0)
	param.vRevRandom := IVector(0, 0, 0)
EndFunc

Function EnterRecollectMode()
	flgRecollectMode := true
EndFunc

Function HideLoadEffect()
	sprLoadEffectBase.SetBlendingEnvelope(256)
	sprLoadEffectBase.BeginActivation(300)
	WaitUntilSpriteActive(sprLoadEffectBase, 0)
	screen.DetachSprite(sprLoadEffectBase)
	sprLoadEffect.Release()
	sprLoadEffectBase.Release()
	resLoadEffectAlpha.Release()
EndFunc

Function HideVoicePlayIndicator()
EndFunc

Function IsGameClear()
	Return sysObj.gameClear
EndFunc

Function IsHitRect(Reference rect, Integer x, Integer y)
	If ((rect.left <= x) & (x < rect.right) & (rect.top <= y) & (y < rect.bottom))
		Return true
	EndIf
	Return false
EndFunc

Function IsHitSprite(Reference spr, Integer x, Integer y)
	Rect rect
	rect := spr.GetRectangle()
	Return IsHitRect(rect, x, y)
EndFunc

Function IsRecollectMode()
	Return flgRecollectMode
EndFunc

Function LeaveRecollectMode()
	flgRecollectMode := false
EndFunc

Function OffGameClear()
	sysObj.gameClear := false
	SaveSystemData()
EndFunc

Function OnGameClear()
	sysObj.gameClear := true
	SaveSystemData()
EndFunc

Function OpeningMovie()
	Hide()
	SetCg("BLACK")
	Transition("", 1000)
	Update()
	DestroyAdvScreen()
	PlayMovie("opening.mei")
	SetupAdvScreen()
	sysObj.viewOpeningMovie := true
EndFunc

Function ShowCursor(Integer fShow)
	screen.ShowCursor(fShow)
EndFunc

Function NormalLoad(Integer id)
	If ((0 <= id) & (id < 60))
		Load("Save" + CreateNumString(id, 3, true))
	EndIf
EndFunc

Function SaveBmp(String filename)
	Debug("SaveBmp-" + filename)
	Sprite spr
	adv.copyAdvScreen(spr)
	File file
	file.Open(filename + ".bmp", 5 | 4)
	file.SaveThumbnailImage(spr)
	file.Close()
EndFunc

Function SaveSprite(Reference spr, Reference filename)
	If (spr.GetType() != "Sprite")
		Return
	Endif
	File file
	file.Open(filename, 5)
	file.SaveThumbnailImage(spr)
	file.Close()
EndFunc

